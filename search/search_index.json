{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HD Active","text":"<p>Prevent external HD's from becoming inactive (sleeping).</p>"},{"location":"#about","title":"About","text":"<p>The functionality of this project, as stated above, is to prevent external mechanical Hard Drives from sleeping and avoid waiting for them to spin up when accessing.</p> <p>The objectives of this project, however are the following:</p> <ul> <li>Learn some QT basics for UI development in Python.</li> <li>Use MkDocs and the theme   MkDocs-Material for documentation.</li> <li>Use PyInvoke for misc tasks in lieu of the more widely used Makefile.   This has the following advantages:     * Avoid the use of a different language for scripting.     * Scripts are OS independent by using Python instead of an OS specific language like bash.     * Scripts are easier to create and maintain (because Python ).     * Other functionality that PyInvoke provides.</li> <li>CI with GitHub Actions.</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<pre><code>python -m app.hd_active --conf app/hd_active.ini\n</code></pre>"},{"location":"#config-file","title":"Config file","text":"<p>The file <code>hd_active.ini</code>, located in the same folder as the app, is used to persist settings.</p> <p>The file is created/updated when settings change.</p> <p>Options:</p> <ul> <li><code>run_on_start</code>: Whether HD Active should start pinging drives when it runs. If <code>False</code>, the   user needs to click Start.</li> <li><code>wait_between_access</code>: Time, in seconds, to wait between drive pings. If too long, the drives may   go to sleep, if too short, drives will be pinged unnecessarily, although this is not a big issue.</li> <li><code>drives</code>: Which drives to ping. This is a comma separated list and doesn't need to have quotes,   ex: <code>e,f,g</code> or <code>e:\\, f:\\, g:\\</code>.</li> </ul> <p>Sample: <pre><code>[HD Active]\nrun_on_start = True\nwait_between_access = 30\ndrives = e:\\, f:\\, g:\\\n</code></pre></p>"},{"location":"development/","title":"Development","text":"<p>To get started with development of this project:</p> <ol> <li>Clone    Virtual environment recommended, but optional.    Developed with Python 3.7, but should be straightforward to upgrade to newer versions.</li> <li><code>pip install -U -r requirements-dev.txt</code></li> <li><code>pre-commit install</code></li> </ol>"},{"location":"development/#ui","title":"UI","text":"<p>This project uses Qt 6 for its UI components.</p> <p><code>Qt Designer</code> is used to create the UI, which outputs a <code>.ui</code> file (XML content that describes the UI). This file is then transformed into a <code>.py</code> file.</p> <p>All the required tools are available by installing <code>pyside6</code>:</p> <ul> <li><code>Qt Designer</code>: <code>pyside6-designer</code></li> <li><code>.ui &gt; .py</code> Converter: <code>pyside6-uic</code>   At the project root (use full paths if relative doesn't work):   <pre><code>pyside6-uic assets/ui/settings.ui -o hd_active/ui/forms/ui_settings_dialog.py\n</code></pre></li> </ul> <p>Note</p> <p>Qt is not necessarily required, something like Tkinter could have been used (more open and included in Python), and the latest version of Qt (6) isn't necessary, something more established like Qt 5 could have been used, but I wanted to dip my toes into the Qt world and figured using the latest version would give me more lasting knowledge.</p>"},{"location":"development/#test","title":"Test","text":"<p>pytest is used for testing and main features used are fixtures, parameters and markers. When working on test cases, make sure you're familiar with how these work.</p>"},{"location":"development/#markers","title":"Markers","text":"<p>Markers are used to distinguish tests with <code>pytest.mark.&lt;marker_name&gt;</code>.</p> <p>List of markers used, defined in <code>pyproject.toml</code></p> Marker Description <code>windows</code> Test case valid on Windows operating system only."},{"location":"development/#development-tasks","title":"Development tasks","text":"<p>This project uses pyinvoke (main page | docs | GitHub) to facilitate executing miscellaneous tasks that help with development.</p>"},{"location":"development/#using-invoke","title":"Using invoke","text":"<p>After the installing the dev requirements (which include <code>invoke</code>), try the commands below.</p> <p>List all available tasks: <pre><code>inv --list\n</code></pre></p> <p>Tasks are grouped (those that have a <code>.</code>). To see all the lint tasks: <pre><code>inv --list lint\n</code></pre></p> <p>Help with a certain task: <pre><code>inv --help pip.package\n</code></pre></p> <p>Use <code>--dry</code> to see what the task does without executing it.</p>"},{"location":"development/#debugging-tasks","title":"Debugging tasks","text":"<p>To debug <code>tasks.py</code> (the file used by <code>invoke</code>), either add a <code>breakpoint()</code> statement or, if using an IDE (in this example PyCharm), use the configuration below to allow setting breakpoints in the code and debug <code>tasks.py</code> as any other Python file.</p> <p></p>"},{"location":"development/#documentation","title":"Documentation","text":"<p>Install documentation requirements with: <pre><code>pip install -r requirements-docs.txt\n</code></pre></p> <p>You can then edit the <code>.md</code> files under the <code>docs</code> directory and, if more need to be added, update <code>mkdocs.yml</code>.</p>"},{"location":"development/#view-locally","title":"View locally","text":"<ul> <li>Web server (recommended)   <pre><code>mkdocs serve\n</code></pre></li> <li>Static files   <pre><code>mkdocs build\n</code></pre>   This generates a static website under <code>/site</code>, which is in <code>.gitignore</code>.</li> </ul>"},{"location":"development/#update-in-github","title":"Update in GitHub","text":"<p>Simply run the command below to push the documentation to GitHub pages.</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>More instructions here.</p> <p>The first time <code>gh-deploy</code> is used, authorization needs to be granted to publish to GitHub Pages. A GitHubCredentials widget appears and follow the prompts.</p> <p>Documentation available here: https://joaonc.github.io/hd_active</p> <p>When running this command, it's this website that needs to be updated (unless working in a forked project). Until a process is established for other people to update this GitHub Page location, please contact me and I'll push the documentation changes as needed.</p>"},{"location":"release/","title":"Release process","text":"<p>Using <code>invoke</code> tasks to help with the build/release workflow:</p> <p>For a list of tasks: <pre><code>inv --list build\n</code></pre></p>"},{"location":"release/#manually-locally","title":"Manually / Locally","text":"<p>The individual steps are described here in case something needs to be done with adjustments in the steps.</p>"},{"location":"release/#build","title":"Build","text":"<ol> <li>Bump version    <pre><code>inv build.version\n</code></pre>    Then select which portion to bump (major, minor or patch).</li> <li>Create / merge a PR</li> </ol>"},{"location":"release/#publish-release","title":"Publish / Release","text":""},{"location":"release/#github","title":"GitHub","text":""},{"location":"release/#package","title":"Package","text":"<ol> <li>Publish package to Pypi.    <pre><code>inv build.publish\n</code></pre>    Gets published to https://pypi.org/project/hd_active/</li> </ol>"},{"location":"release/#binary","title":"Binary","text":"<ol> <li>Build app    <pre><code>inv build.app\n</code></pre>    Check that the executable looks good after building (run tests).</li> <li>Upload to </li> </ol>"},{"location":"release/#pypi","title":"Pypi","text":"<p>TODO: Finish</p>"},{"location":"release/#github-actions","title":"GitHub Actions","text":"<p>The GitHub actions Release and Build app follow the same steps described above, but in an automatic way, making it easier and with less room for error.</p> <p>TODO: Finish</p>"}]}